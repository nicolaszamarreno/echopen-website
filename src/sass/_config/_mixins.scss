/* # Rétablissement du flux */

/*
http://nicolasgallagher.com/micro-clearfix-hack/
*/

@mixin clearfix
{
  //zoom: 1;

  &:before,
  &:after
  {
    content: '';
    display: table;
  }
  &:after
  {
    clear: both;
  }
}

/* # _Reset_ (et sa version surchargée) */

@mixin reset
{
  margin:  0;
  padding: 0;
  border:  0;
  background-color: transparent; // pour les boutons
  list-style-type: none; // pour les listes
}

/*
https://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html
*/

@mixin hide-for-viewer
{
  position: absolute;
  height:  1px;
  width:   1px;
  padding: 0;
  border:  0;
  overflow: hidden;
  clip: rect(1px  1px  1px  1px);
  clip: rect(1px, 1px, 1px, 1px);
}


/* # Étirement des blocs */

@mixin stretch($length: 0)
{
  position: absolute;

  left:   $length;
  top:    $length;
  bottom: $length;
  right:  $length;

}



/* # Utilitaire pour la fonction calc() */
@mixin calc($property, $expression)
{
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

// Inline-block bugfix
// @link http://www.alsacreations.com/astuce/lire/1432-display-inline-block-espaces-indesirables.html
@mixin no-inline-block-margin()
{
  margin-right: -0.25em;

}


// create multi layout with z-index
@mixin layer($layer){
    @for $i from 1 through $layer {
        .layout-#{$i} {
            position: relative;
            z-index: #{$i};
        }
    }
}

// Personalize placeholder's inputs
@mixin placeholderInput() {
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    @content;
  }
  &::-moz-placeholder { /* Firefox 19+ */
    @content;
  }
  &:-ms-input-placeholder { /* IE 10+ */
    @content;
  }
  &:-moz-placeholder { /* Firefox 18- */
    @content;
  }
}

@mixin font($font:$font, $size:null, $line_height:null, $color:$color-primary, $font_weight:null){
  font-family: $font;
  font-size: $size;
  font-weight: $font_weight;
  line-height: $line_height;
  color: $color;
}

@mixin center($width, $height){
  height: $height;
  width: $width;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

@mixin break-line($locate){
    &:#{$locate}{
        content: '\A';
        @content;
    }
}

/**
BOOTSTRAP
 */


@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}